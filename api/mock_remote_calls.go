// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/sendlovebox/woocommerce-sdk/model"
)

// MockRemoteCalls is a mock of RemoteCalls interface.
type MockRemoteCalls struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteCallsMockRecorder
}

// MockRemoteCallsMockRecorder is the mock recorder for MockRemoteCalls.
type MockRemoteCallsMockRecorder struct {
	mock *MockRemoteCalls
}

// NewMockRemoteCalls creates a new mock instance.
func NewMockRemoteCalls(ctrl *gomock.Controller) *MockRemoteCalls {
	mock := &MockRemoteCalls{ctrl: ctrl}
	mock.recorder = &MockRemoteCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteCalls) EXPECT() *MockRemoteCallsMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockRemoteCalls) Auth(customerKey, customerSecret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", customerKey, customerSecret)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockRemoteCallsMockRecorder) Auth(customerKey, customerSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockRemoteCalls)(nil).Auth), customerKey, customerSecret)
}

// CreateACustomer mocks base method.
func (m *MockRemoteCalls) CreateACustomer(ctx context.Context, request model.CreateCustomerRequest) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateACustomer", ctx, request)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateACustomer indicates an expected call of CreateACustomer.
func (mr *MockRemoteCallsMockRecorder) CreateACustomer(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateACustomer", reflect.TypeOf((*MockRemoteCalls)(nil).CreateACustomer), ctx, request)
}

// CreateAnOrder mocks base method.
func (m *MockRemoteCalls) CreateAnOrder(ctx context.Context, request model.CreateOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnOrder", ctx, request)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnOrder indicates an expected call of CreateAnOrder.
func (mr *MockRemoteCallsMockRecorder) CreateAnOrder(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnOrder", reflect.TypeOf((*MockRemoteCalls)(nil).CreateAnOrder), ctx, request)
}

// DeleteAnOrder mocks base method.
func (m *MockRemoteCalls) DeleteAnOrder(ctx context.Context, orderID int, forceDelete bool) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnOrder", ctx, orderID, forceDelete)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAnOrder indicates an expected call of DeleteAnOrder.
func (mr *MockRemoteCallsMockRecorder) DeleteAnOrder(ctx, orderID, forceDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnOrder", reflect.TypeOf((*MockRemoteCalls)(nil).DeleteAnOrder), ctx, orderID, forceDelete)
}

// GetAProductReview mocks base method.
func (m *MockRemoteCalls) GetAProductReview(ctx context.Context, reviewID string) (*model.ProductReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAProductReview", ctx, reviewID)
	ret0, _ := ret[0].(*model.ProductReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAProductReview indicates an expected call of GetAProductReview.
func (mr *MockRemoteCallsMockRecorder) GetAProductReview(ctx, reviewID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAProductReview", reflect.TypeOf((*MockRemoteCalls)(nil).GetAProductReview), ctx, reviewID)
}

// ListAllCategories mocks base method.
func (m *MockRemoteCalls) ListAllCategories(ctx context.Context, request model.SearchCategoriesRequest) ([]*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllCategories", ctx, request)
	ret0, _ := ret[0].([]*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCategories indicates an expected call of ListAllCategories.
func (mr *MockRemoteCallsMockRecorder) ListAllCategories(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCategories", reflect.TypeOf((*MockRemoteCalls)(nil).ListAllCategories), ctx, request)
}

// ListAllProductTags mocks base method.
func (m *MockRemoteCalls) ListAllProductTags(ctx context.Context, request model.SearchTagsRequest) ([]*model.ProductTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllProductTags", ctx, request)
	ret0, _ := ret[0].([]*model.ProductTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProductTags indicates an expected call of ListAllProductTags.
func (mr *MockRemoteCallsMockRecorder) ListAllProductTags(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProductTags", reflect.TypeOf((*MockRemoteCalls)(nil).ListAllProductTags), ctx, request)
}

// ListAllProducts mocks base method.
func (m *MockRemoteCalls) ListAllProducts(ctx context.Context, request model.SearchProductsRequest) ([]model.Product, model.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllProducts", ctx, request)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(model.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllProducts indicates an expected call of ListAllProducts.
func (mr *MockRemoteCallsMockRecorder) ListAllProducts(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProducts", reflect.TypeOf((*MockRemoteCalls)(nil).ListAllProducts), ctx, request)
}

// ListProductReviews mocks base method.
func (m *MockRemoteCalls) ListProductReviews(ctx context.Context, request model.SearchProductReviewsRequest) ([]model.ProductReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductReviews", ctx, request)
	ret0, _ := ret[0].([]model.ProductReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductReviews indicates an expected call of ListProductReviews.
func (mr *MockRemoteCallsMockRecorder) ListProductReviews(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductReviews", reflect.TypeOf((*MockRemoteCalls)(nil).ListProductReviews), ctx, request)
}

// RetrieveACategory mocks base method.
func (m *MockRemoteCalls) RetrieveACategory(ctx context.Context, id string) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveACategory", ctx, id)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveACategory indicates an expected call of RetrieveACategory.
func (mr *MockRemoteCallsMockRecorder) RetrieveACategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveACategory", reflect.TypeOf((*MockRemoteCalls)(nil).RetrieveACategory), ctx, id)
}

// RetrieveAProduct mocks base method.
func (m *MockRemoteCalls) RetrieveAProduct(ctx context.Context, id string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAProduct", ctx, id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAProduct indicates an expected call of RetrieveAProduct.
func (mr *MockRemoteCallsMockRecorder) RetrieveAProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAProduct", reflect.TypeOf((*MockRemoteCalls)(nil).RetrieveAProduct), ctx, id)
}

// RetrieveAProductVariation mocks base method.
func (m *MockRemoteCalls) RetrieveAProductVariation(ctx context.Context, productID, variationID string) (model.ProductVariation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAProductVariation", ctx, productID, variationID)
	ret0, _ := ret[0].(model.ProductVariation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAProductVariation indicates an expected call of RetrieveAProductVariation.
func (mr *MockRemoteCallsMockRecorder) RetrieveAProductVariation(ctx, productID, variationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAProductVariation", reflect.TypeOf((*MockRemoteCalls)(nil).RetrieveAProductVariation), ctx, productID, variationID)
}

// RetrieveAnOrder mocks base method.
func (m *MockRemoteCalls) RetrieveAnOrder(ctx context.Context, orderID int) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAnOrder", ctx, orderID)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAnOrder indicates an expected call of RetrieveAnOrder.
func (mr *MockRemoteCallsMockRecorder) RetrieveAnOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAnOrder", reflect.TypeOf((*MockRemoteCalls)(nil).RetrieveAnOrder), ctx, orderID)
}

// RetrieveProductVariations mocks base method.
func (m *MockRemoteCalls) RetrieveProductVariations(ctx context.Context, productID string, request model.SearchProductVariationsRequest) ([]model.ProductVariation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveProductVariations", ctx, productID, request)
	ret0, _ := ret[0].([]model.ProductVariation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveProductVariations indicates an expected call of RetrieveProductVariations.
func (mr *MockRemoteCallsMockRecorder) RetrieveProductVariations(ctx, productID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveProductVariations", reflect.TypeOf((*MockRemoteCalls)(nil).RetrieveProductVariations), ctx, productID, request)
}

// ReviewProduct mocks base method.
func (m *MockRemoteCalls) ReviewProduct(ctx context.Context, request model.ReviewProductRequest) (*model.ProductReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewProduct", ctx, request)
	ret0, _ := ret[0].(*model.ProductReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReviewProduct indicates an expected call of ReviewProduct.
func (mr *MockRemoteCallsMockRecorder) ReviewProduct(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewProduct", reflect.TypeOf((*MockRemoteCalls)(nil).ReviewProduct), ctx, request)
}

// RunInSandboxMode mocks base method.
func (m *MockRemoteCalls) RunInSandboxMode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunInSandboxMode")
}

// RunInSandboxMode indicates an expected call of RunInSandboxMode.
func (mr *MockRemoteCallsMockRecorder) RunInSandboxMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunInSandboxMode", reflect.TypeOf((*MockRemoteCalls)(nil).RunInSandboxMode))
}

// UpdateAnOrder mocks base method.
func (m *MockRemoteCalls) UpdateAnOrder(ctx context.Context, orderID int, request model.UpdateOrderRequest) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnOrder", ctx, orderID, request)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnOrder indicates an expected call of UpdateAnOrder.
func (mr *MockRemoteCallsMockRecorder) UpdateAnOrder(ctx, orderID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnOrder", reflect.TypeOf((*MockRemoteCalls)(nil).UpdateAnOrder), ctx, orderID, request)
}

// UpdateProductReview mocks base method.
func (m *MockRemoteCalls) UpdateProductReview(ctx context.Context, reviewID string, request model.ReviewProductRequest) (*model.ProductReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductReview", ctx, reviewID, request)
	ret0, _ := ret[0].(*model.ProductReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProductReview indicates an expected call of UpdateProductReview.
func (mr *MockRemoteCallsMockRecorder) UpdateProductReview(ctx, reviewID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductReview", reflect.TypeOf((*MockRemoteCalls)(nil).UpdateProductReview), ctx, reviewID, request)
}
